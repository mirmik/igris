#ifndef IGRIS_STD_ATOMIC_H
#define IGRIS_STD_ATOMIC_H

namespace std
{
    template <typename T> class atomic
    {
        T val;

    public:
        atomic() {}
        atomic(T val) : val(val) {}

        operator T() const
        {
            return val;
        }
    };

    template <typename T> T load(T &val)
    {
        return val;
    }

    template <typename T> void store(T &val, T newval)
    {
        val = newval;
    }

    template <typename T> T exchange(T &val, T newval)
    {
        T oldval = val;
        val = newval;
        return oldval;
    }

    template <typename T> T fetch_add(T &val, T addval)
    {
        T oldval = val;
        val += addval;
        return oldval;
    }

    template <typename T> T fetch_sub(T &val, T subval)
    {
        T oldval = val;
        val -= subval;
        return oldval;
    }

    template <typename T> T fetch_and(T &val, T andval)
    {
        T oldval = val;
        val &= andval;
        return oldval;
    }

    template <typename T> T fetch_or(T &val, T orval)
    {
        T oldval = val;
        val |= orval;
        return oldval;
    }

    template <typename T> T fetch_xor(T &val, T xorval)
    {
        T oldval = val;
        val ^= xorval;
        return oldval;
    }

}

#endif