#ifndef IGRIS_STD_CMATH_H
#define IGRIS_STD_CMATH_H

#include <math.h>

#ifndef WITHOUT_LOG2
#define WITHOUT_LOG2 0
#endif

#ifdef abs
#undef abs
#endif

#undef isnan
#undef isinf

namespace std
{
    static inline bool isnan(long double x)
    {
        return sizeof(x) == 4
                   ? (__FLOAT_BITS((float)x) & 0x7fffffff) > 0x7f800000
                   : (__DOUBLE_BITS(x) & (0ULL - 1ULL) >> 1) > 0x7ffULL << 52;
    }

    static inline bool isinf(long double x)
    {
        return sizeof(x) == 4
                   ? (__FLOAT_BITS((float)x) & 0x7fffffff) == 0x7f800000
                   : (__DOUBLE_BITS(x) & (0ULL - 1ULL) >> 1) == 0x7ffULL << 52;
    }

    static inline bool isnan(double x)
    {
        return sizeof(x) == 4
                   ? (__FLOAT_BITS((float)x) & 0x7fffffff) > 0x7f800000
                   : (__DOUBLE_BITS(x) & (0ULL - 1ULL) >> 1) > 0x7ffULL << 52;
    }

    static inline bool isinf(double x)
    {
        return sizeof(x) == 4
                   ? (__FLOAT_BITS((float)x) & 0x7fffffff) == 0x7f800000
                   : (__DOUBLE_BITS(x) & (0ULL - 1ULL) >> 1) == 0x7ffULL << 52;
    }

    static inline bool isnan(float x)
    {
        return sizeof(x) == 4
                   ? (__FLOAT_BITS((float)x) & 0x7fffffff) > 0x7f800000
                   : (__DOUBLE_BITS(x) & (0ULL - 1ULL) >> 1) > 0x7ffULL << 52;
    }

    static inline bool isinf(float x)
    {
        return sizeof(x) == 4
                   ? (__FLOAT_BITS((float)x) & 0x7fffffff) == 0x7f800000
                   : (__DOUBLE_BITS(x) & (0ULL - 1ULL) >> 1) == 0x7ffULL << 52;
    }

    template <class T> T abs(const T &a)
    {
        return a >= 0 ? a : -a;
    }

    using ::cos;
    using ::sin;
    using ::tan;
    // using ::ctg;
    using ::cosh;
    using ::sinh;
    using ::tanh;
    // using ::ctgh;

    using ::acos;
    using ::asin;
    using ::atan;
    using ::atan2;

    using ::exp;
    using ::log;
    using ::pow;
    using ::sqrt;

    //#if !(WITHOUT_LOG2)
    //	using ::log2;
    //#endif

    using ::log10;

    using ::copysign;

    using ::ceil;
    using ::floor;
    using ::round;

    using ::fmod;

    static inline int abs(int n)
    {
        return n < 0 ? -n : n;
    }
    static inline long abs(long n)
    {
        return n < 0 ? -n : n;
    }
    static inline long long abs(long long n)
    {
        return n < 0 ? -n : n;
    }

    static inline float abs(float n)
    {
        return n < 0 ? -n : n;
    }
    static inline double abs(double n)
    {
        return n < 0 ? -n : n;
    }
    static inline long double abs(long double n)
    {
        return n < 0 ? -n : n;
    }

    static inline float fabs(float n)
    {
        return n < 0 ? -n : n;
    }
    static inline double fabs(double n)
    {
        return n < 0 ? -n : n;
    }
    static inline long double fabs(long double n)
    {
        return n < 0 ? -n : n;
    }
}

#endif
