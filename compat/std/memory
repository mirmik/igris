#ifndef GXX_STD_MEMORY_H
#define GXX_STD_MEMORY_H

#include <new>
#include <move.h>

namespace std {
	template <typename T>
	class allocator {
	public:
		T* allocate(size_t n) {
			return (T*)malloc(n*sizeof(T));
		}

		void deallocate(T* ptr, size_t) {
			free(ptr);
		}
	};
}

#include <shared.h>

namespace std {
	template <typename L>
	struct lock_guard {
		L& lock;
		lock_guard(L& lock) : lock(lock) { lock.lock(); }
		~lock_guard() { lock.unlock(); }
	};
}

#endif
