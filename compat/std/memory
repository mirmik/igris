#ifndef GXX_STD_MEMORY_H
#define GXX_STD_MEMORY_H

#include <algorithm>
#include <move.h>
#include <new>

namespace std
{
    template <typename T> class allocator
    {
    public:
        T *allocate(size_t n)
        {
            return (T *)malloc(n * sizeof(T));
        }

        void deallocate(T *ptr, size_t)
        {
            free(ptr);
        }
    };
}

#include <shared.h>

namespace std
{
    template <typename L> struct lock_guard
    {
        L &lock;
        lock_guard(L &lock) : lock(lock)
        {
            lock.lock();
        }
        ~lock_guard()
        {
            lock.unlock();
        }
    };

    template <typename T> class unique_ptr
    {
        T *ptr = nullptr;

    public:
        unique_ptr() : ptr(nullptr) {}
        unique_ptr(T *ptr) : ptr(ptr) {}
        unique_ptr(unique_ptr &&other) : ptr(other.ptr)
        {
            other.ptr = nullptr;
        }
        unique_ptr(const unique_ptr &) = delete;
        unique_ptr &operator=(const unique_ptr &) = delete;
        unique_ptr &operator=(unique_ptr &&other)
        {
            ptr = other.ptr;
            other.ptr = nullptr;
            return *this;
        }
        ~unique_ptr()
        {
            if (ptr)
                delete ptr;
        }

        T *operator->()
        {
            return ptr;
        }
        T &operator*()
        {
            return *ptr;
        }

        T *get()
        {
            return ptr;
        }
        T *release()
        {
            T *tmp = ptr;
            ptr = nullptr;
            return tmp;
        }
        void reset(T *ptr)
        {
            if (this->ptr)
                delete this->ptr;
            this->ptr = ptr;
        }

        operator bool()
        {
            return ptr != nullptr;
        }

        void swap(unique_ptr &other)
        {
            std::swap(ptr, other.ptr);
        }
    };
    // make unique
    template <typename T, typename... Args>
    std::unique_ptr<T> make_unique(Args &&... args)
    {
        return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
    }
}

#endif
