#ifndef GENOS_STRING_H
#define GENOS_STRING_H

#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <assert.h>
#include <inttypes.h>
#include <memory>
#include <iterator>

namespace std
{
	template <
	    class CharT
	    > class char_traits;

	template <class Allocator = std::allocator<char>>
	class basic_string
	{

		char* m_data;
		size_t m_capacity;
		size_t m_size;

		Allocator m_alloc;

	public:
		using size_type = ::size_t;

	public:
		const char* data() const {return m_data; }
		size_t capacity() const {return m_capacity; }
		size_t size() const {return m_size; }
		size_t length() const { return m_size; }

		basic_string()  : m_data(nullptr), m_capacity(0), m_size(0) {}

		basic_string(const basic_string& other) : basic_string()
		{
			*this = other;
		}

		basic_string(basic_string&& other) : basic_string()
		{
			move(other);
		}

		basic_string(const char* str) : basic_string()
		{
			if (str) copy(str, strlen(str));
		}

		basic_string(const char* str, size_t sz) : basic_string()
		{
			if (str) copy(str, sz);
		}

		~basic_string()
		{
			if (m_data) m_alloc.deallocate(m_data);
		};


		basic_string & copy(const char *cstr, size_t length)
		{
			if (!reserve(length))
			{
				invalidate();
				return *this;
			}
			m_size = length;
			memcpy(m_data, cstr, length);
			return *this;
		}


		void move(basic_string &rhs)
		{
			if (m_data) m_alloc.deallocate(m_data);
			m_data = rhs.m_data;
			m_capacity = rhs.m_capacity;
			m_size = rhs.m_size;
			m_alloc = rhs.m_alloc;
			rhs.m_data = nullptr;
			rhs.m_capacity = 0;
			rhs.m_size = 0;
		}


		void invalidate(void)
		{
			if (m_data) m_alloc.deallocate(m_data);
			m_data = nullptr;
			m_capacity = m_size = 0;
		}

		basic_string & operator = (const basic_string &rhs)
		{
			if (this == &rhs) return *this;

			if (rhs.m_data) copy(rhs.m_data, rhs.m_size);
			else invalidate();

			return *this;
		}

		basic_string & operator = (basic_string &&rval)
		{
			if (this != &rval) move(rval);
			return *this;
		}

		basic_string & operator = (const char* str)
		{
			copy(str, strlen(str));
			return *this;
		}

		bool operator != (const char* str)
		{
			return strcmp(m_data, str) != 0;
		}

		bool operator == (const char* str)
		{
			return strcmp(m_data, str) == 0;
		}

		char& operator[] (size_t i) { return m_data[i]; }
		const char& operator[] (size_t i) const { return m_data[i]; }

		const char* c_str() const
		{
			basic_string* self = (basic_string*) this;
			self->reserve(m_size + 1);
			*(self->m_data + self->m_size) = 0;
			return self->begin();
		};

		char* begin() { return m_data; }
		const char* end() { return m_data + m_size; }
		char* rbegin() { return m_data + m_size - 1; }
		const char* rend() { return m_data - 1; }

		const char* begin() const { return m_data; }
		const char* end() const { return m_data + m_size; }
		const char* rbegin() const { return m_data + m_size - 1; }
		const char* rend() const { return m_data - 1; }


		unsigned char reserve(size_t sz)
		{
			if (m_data && m_capacity >= sz) return 1;
			if (changeBuffer(sz))
			{
				return 1;
			}
			return 0;
		}

		unsigned char changeBuffer(size_t maxStrLen)
		{
			char* newbuf = (char *)m_alloc.allocate(maxStrLen);
			char* oldbuf = m_data;
			memcpy(newbuf, oldbuf, m_size);
			if (newbuf)
			{
				m_data = newbuf;
				m_capacity = maxStrLen;
				m_alloc.deallocate(oldbuf);
				return 1;
			}
			return 0;
		}

		unsigned char append(const char *cstr, size_t length)
		{
			size_t newlen = m_size + length;
			if (!cstr) return 0;
			if (length == 0) return 1;
			if (!reserve(newlen)) return 0;
			memcpy(m_data + m_size, cstr, length);
			m_size = newlen;
			return 1;
		}

		void append(char c)
		{
			append(&c, 1);
		}

		void append(const basic_string& str)
		{
			append(str.data(), str.size());
		}

		void push_back(char c)
		{
			append(&c, 1);
		}

		basic_string& operator += (char c)
		{
			append(c);
			return *this;
		}

		bool operator < (const basic_string& other) const
		{
			int ret = strncmp(data(), other.data(), size() > other.size() ? size() : other.size());
			if (ret == 0) return size() < other.size();
			else return ret < 0;
		};

		bool operator == (const basic_string& other) const
		{
			return m_size == other.m_size ? strncmp(m_data, other.m_data, m_size) == 0 : false;
		};


		basic_string & shrink()
		{
			changeBuffer(m_size);
			return *this;
		}

		basic_string & shrink_to_print()
		{
			changeBuffer(m_size + 1);
			return *this;
		}


		basic_string& resize(size_t sz)
		{
			reserve(sz);
			assert(sz <= m_capacity);
			m_size = sz;
			return *this;
		}
	};

	using string = basic_string<>;
}

#endif
