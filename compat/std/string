#ifndef GENOS_STRING_H
#define GENOS_STRING_H

#include <assert.h>
#include <igris/util/numconvert.h>
#include <inttypes.h>
#include <iterator>
#include <memory>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

namespace std
{
    template <class CharT> class char_traits;

    template <class CharT = char,
              class Traits = char_traits<CharT>,
              class Allocator = std::allocator<char>>
    class basic_string
    {

        CharT *m_data = nullptr;
        size_t m_capacity = 0;
        size_t m_size = 0;

        Allocator m_alloc = {};

    public:
        using size_type = ::size_t;
        constexpr static size_type npos = -1;

    public:
        const char *data() const
        {
            return m_data;
        }
        size_t capacity() const
        {
            return m_capacity;
        }
        size_t size() const
        {
            return m_size;
        }
        size_t length() const
        {
            return m_size;
        }

        bool empty() const
        {
            return m_size == 0;
        }

        basic_string() = default;

        basic_string(const basic_string &other) : basic_string()
        {
            *this = other;
        }

        basic_string(basic_string &&other) : basic_string()
        {
            move(other);
        }

        basic_string(const char *str) : basic_string()
        {
            if (str)
                copy(str, strlen(str));
        }

        basic_string(const char *str, size_t sz) : basic_string()
        {
            if (str && sz)
                copy(str, sz);
        }

        ~basic_string()
        {
            if (m_data)
                m_alloc.deallocate(m_data, m_capacity);
        };

        basic_string &copy(const char *cstr, size_t length)
        {
            if (!reserve(length))
            {
                invalidate();
                return *this;
            }
            m_size = length;
            memcpy(m_data, cstr, length);
            return *this;
        }

        void move(basic_string &rhs)
        {
            if (m_data)
                m_alloc.deallocate(m_data, m_capacity);
            m_data = rhs.m_data;
            m_capacity = rhs.m_capacity;
            m_size = rhs.m_size;
            m_alloc = rhs.m_alloc;
            rhs.m_data = nullptr;
            rhs.m_capacity = 0;
            rhs.m_size = 0;
        }

        void invalidate(void)
        {
            if (m_data)
                m_alloc.deallocate(m_data, m_capacity);
            m_data = nullptr;
            m_capacity = m_size = 0;
        }

        basic_string &operator=(const basic_string &rhs)
        {
            if (this == &rhs)
                return *this;

            if (rhs.m_data)
                copy(rhs.m_data, rhs.m_size);
            else
                invalidate();

            return *this;
        }

        basic_string &operator=(basic_string &&rval)
        {
            if (this != &rval)
                move(rval);
            return *this;
        }

        basic_string &operator=(const char *str)
        {
            copy(str, strlen(str));
            return *this;
        }

        bool operator!=(const char *str) const
        {
            auto othlen = strlen(str);
            auto curlen = size();
            if (othlen != curlen)
                return true;
            return memcmp(m_data, str, othlen) != 0;
        }

        bool operator==(const char *str) const
        {
            auto othlen = strlen(str);
            auto curlen = size();
            if (othlen != curlen)
                return false;
            return memcmp(m_data, str, othlen) == 0;
        }

        bool operator!=(const basic_string &str) const
        {
            auto othlen = str.size();
            auto curlen = size();
            if (othlen != curlen)
                return true;
            return memcmp(m_data, str.m_data, othlen) != 0;
        }

        bool operator==(const basic_string &str) const
        {
            auto othlen = str.size();
            auto curlen = size();
            if (othlen != curlen)
                return false;
            return memcmp(m_data, str.m_data, othlen) == 0;
        }

        char &operator[](size_t i)
        {
            return m_data[i];
        }
        const char &operator[](size_t i) const
        {
            return m_data[i];
        }

        const char *c_str() const
        {
            basic_string *self = (basic_string *)this;
            self->reserve(m_size + 1);
            *(self->m_data + self->m_size) = 0;
            return self->begin();
        };

        char *begin()
        {
            return m_data;
        }
        const char *end()
        {
            return m_data + m_size;
        }
        char *rbegin()
        {
            return m_data + m_size - 1;
        }
        const char *rend()
        {
            return m_data - 1;
        }

        const char *begin() const
        {
            return m_data;
        }
        const char *end() const
        {
            return m_data + m_size;
        }
        const char *rbegin() const
        {
            return m_data + m_size - 1;
        }
        const char *rend() const
        {
            return m_data - 1;
        }

        unsigned char reserve(size_t sz)
        {
            if (m_data && m_capacity >= sz)
                return 1;
            if (changeBuffer(sz))
            {
                return 1;
            }
            return 0;
        }

        size_type find(const char *str, size_t pos = 0) const
        {
            if (pos >= m_size)
                return -1;
            auto len = strlen(str);
            if (len == 0)
                return -1;
            if (len > m_size)
                return -1;
            for (size_t i = pos; i < m_size - len; i++)
            {
                if (memcmp(m_data + i, str, len) == 0)
                    return i;
            }
            return -1;
        }

        unsigned char changeBuffer(size_t maxStrLen)
        {
            size_t oldcap = m_capacity;
            char *newbuf = (char *)m_alloc.allocate(maxStrLen);
            char *oldbuf = m_data;
            memcpy(newbuf, oldbuf, m_size);
            if (newbuf)
            {
                m_data = newbuf;
                m_capacity = maxStrLen;
                m_alloc.deallocate(oldbuf, oldcap);
                return 1;
            }
            return 0;
        }

        unsigned char append(const char *cstr, size_t length)
        {
            size_t newlen = m_size + length;
            if (!cstr)
                return 0;
            if (length == 0)
                return 1;
            if (!reserve(newlen))
                return 0;
            memcpy(m_data + m_size, cstr, length);
            m_size = newlen;
            return 1;
        }

        void append(char c)
        {
            append(&c, 1);
        }

        void append(const basic_string &str)
        {
            append(str.data(), str.size());
        }

        void push_back(char c)
        {
            append(&c, 1);
        }

        int compare(const char *str) const
        {
            auto len = strlen(str);
            if (len > m_size)
                return 1;
            if (len < m_size)
                return -1;
            return memcmp(m_data, str, len);
        }

        basic_string &operator+=(char c)
        {
            append(c);
            return *this;
        }

        basic_string &operator+=(const char *cstr)
        {
            append(cstr, strlen(cstr));
            return *this;
        }

        void clear()
        {
            m_size = 0;
        }

        basic_string &operator+=(const basic_string &str)
        {
            append(str.data(), str.size());
            return *this;
        }

        bool operator<(const basic_string &other) const
        {
            int ret = strncmp(data(),
                              other.data(),
                              size() > other.size() ? size() : other.size());
            if (ret == 0)
                return size() < other.size();
            else
                return ret < 0;
        };

        basic_string &shrink()
        {
            changeBuffer(m_size);
            return *this;
        }

        basic_string &shrink_to_print()
        {
            changeBuffer(m_size + 1);
            return *this;
        }

        basic_string &resize(size_t sz)
        {
            reserve(sz);
            assert(sz <= m_capacity);
            m_size = sz;
            return *this;
        }

        basic_string substr(size_t start, size_t len) const
        {
            basic_string ret;
            ret.reserve(len);
            for (size_t i = start; i < start + len; i++)
            {
                ret.push_back(m_data[i]);
            }
            return ret;
        }

        ssize_t find_last_not_of(char c)
        {
            for (auto i = rbegin(); i != rend(); i--)
            {
                if (*i != c)
                    return i - begin();
            }
            return npos;
        }
    };

    using string = basic_string<>;

    static inline int
    stoi(const std::string &str, std::size_t *pos = nullptr, int base = 10)
    {
        (void)pos; // TODO
        return igris_atoi32(str.c_str(), base, nullptr);
    }

    static inline long
    stol(const std::string &str, std::size_t *pos = nullptr, int base = 10)
    {
        (void)pos; // TODO
        return igris_atoi32(str.c_str(), base, nullptr);
    }

    static inline long long
    stoll(const std::string &str, std::size_t *pos = nullptr, int base = 10)
    {
        (void)pos; // TODO
        return igris_atoi32(str.c_str(), base, nullptr);
    }

    static inline double stod(const std::string &str,
                              std::size_t *pos = nullptr)
    {
        (void)pos; // TODO
        return igris_atof32(str.c_str(), nullptr);
    }

    static inline bool operator==(const char *str, const string &str2)
    {
        return str2 == str;
    }

    static inline std::string operator+(const std::string &lhs,
                                        const std::string &rhs)
    {
        std::string res;
        res.reserve(lhs.size() + rhs.size());
        res.append(lhs);
        res.append(rhs);
        return res;
    }

    static inline std::string operator+(const std::string &lhs, const char *rhs)
    {
        std::string res;
        res.reserve(lhs.size() + strlen(rhs));
        res.append(lhs);
        res.append(rhs);
        return res;
    }

    static inline std::string operator+(const char *lhs, const std::string &rhs)
    {
        std::string res;
        res.reserve(strlen(lhs) + rhs.size());
        res.append(lhs);
        res.append(rhs);
        return res;
    }

    static inline std::string to_string(int val)
    {
        char buf[64];
        igris_i64toa(val, buf, 10);
        return buf;
    }

    static inline std::string to_string(long val)
    {
        char buf[64];
        igris_i64toa(val, buf, 10);
        return buf;
    }

    static inline std::string to_string(long long val)
    {
        char buf[64];
        igris_i64toa(val, buf, 10);
        return buf;
    }

    static inline std::string to_string(unsigned val)
    {
        char buf[64];
        igris_i64toa(val, buf, 10);
        return buf;
    }

    static inline std::string to_string(unsigned long val)
    {
        char buf[64];
        igris_i64toa(val, buf, 10);
        return buf;
    }

    static inline std::string to_string(unsigned long long val)
    {
        char buf[64];
        igris_i64toa(val, buf, 10);
        return buf;
    }

    static inline std::string to_string(float val)
    {
        char buf[64];
        igris_f64toa(val, buf, 5);
        return buf;
    }

    static inline std::string to_string(double val)
    {
        char buf[64];
        igris_f64toa(val, buf, 5);
        return buf;
    }
}

/*namespace std
{
    namespace string_literals
    {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
        inline basic_string<char> operator""s(const char *__str, size_t __len)
        {
            return basic_string<char>{__str, __len};
        }
#pragma GCC diagnostic pop
    }
}*/

#endif
