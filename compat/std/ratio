#ifndef IGRIS_STD_RATIO_H
#define IGRIS_STD_RATIO_H

#include <cstdint>

namespace std
{
    template <std::intmax_t Num, std::intmax_t Denom = 1> class ratio
    {
    public:
        static constexpr std::intmax_t num = Num;
        static constexpr std::intmax_t den = Denom;
    };

    using atto = std::ratio<1, 1000000000000000000>;
    using femto = std::ratio<1, 1000000000000000>;
    using pico = std::ratio<1, 1000000000000>;
    using nano = std::ratio<1, 1000000000>;
    using micro = std::ratio<1, 1000000>;
    using milli = std::ratio<1, 1000>;
    using centi = std::ratio<1, 100>;
    using deci = std::ratio<1, 10>;
    using deca = std::ratio<10, 1>;
    using hecto = std::ratio<100, 1>;
    using kilo = std::ratio<1000, 1>;
    using mega = std::ratio<1000000, 1>;
    using giga = std::ratio<1000000000, 1>;
    using tera = std::ratio<1000000000000, 1>;
    using peta = std::ratio<1000000000000000, 1>;
    using exa = std::ratio<1000000000000000000, 1>;

    template <class R1, class R2> struct ratio_add
    {
        using type = std::ratio<R1::num * R2::den + R2::num * R1::den,
                                R1::den * R2::den>;
    };

    template <class R1, class R2> struct ratio_subtract
    {
        using type = std::ratio<R1::num * R2::den - R2::num * R1::den,
                                R1::den * R2::den>;
    };

    template <class R1, class R2> struct ratio_multiply
    {
        using type = std::ratio<R1::num * R2::num, R1::den * R2::den>;
    };

    template <class R1, class R2> struct ratio_divide
    {
        using type = std::ratio<R1::num * R2::den, R1::den * R2::num>;
    };
}

#endif