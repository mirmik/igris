#ifndef GXX_STD_UTILITY
#define GXX_STD_UTILITY

#include <new>
#include <move.h>

#include <type_traits>

#include <utility_impl/pair.hpp>
#include <utility_impl/minimal.h>

namespace std
{
	template<class T>
	auto data(T& obj) 
	{
		return obj.data();
	}

	template<class T>
	const auto data(const T& obj) 
	{
		return obj.data();
	}

	template<std::size_t _Int>
	struct __pair_get;

	template<>
	struct __pair_get<0>
	{
		template<typename _Tp1, typename _Tp2>
		static constexpr _Tp1&
		__get(std::pair<_Tp1, _Tp2>& __pair) noexcept
		{ return __pair.first; }

		template<typename _Tp1, typename _Tp2>
		static constexpr _Tp1&&
		__move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
		{ return std::forward<_Tp1>(__pair.first); }

		template<typename _Tp1, typename _Tp2>
		static constexpr const _Tp1&
		__const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
		{ return __pair.first; }
	};

	template<>
	struct __pair_get<1>
	{
		template<typename _Tp1, typename _Tp2>
		static constexpr _Tp2&
		__get(std::pair<_Tp1, _Tp2>& __pair) noexcept
		{ return __pair.second; }

		template<typename _Tp1, typename _Tp2>
		static constexpr _Tp2&&
		__move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
		{ return std::forward<_Tp2>(__pair.second); }

		template<typename _Tp1, typename _Tp2>
		static constexpr const _Tp2&
		__const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
		{ return __pair.second; }
	};

	template <typename _Tp, typename _Up>
	constexpr _Tp&
	get(pair<_Tp, _Up>& __p) noexcept
	{ return __p.first; }

	template <typename _Tp, typename _Up>
	constexpr const _Tp&
	get(const pair<_Tp, _Up>& __p) noexcept
	{ return __p.first; }

	template <typename _Tp, typename _Up>
	constexpr _Tp&&
	get(pair<_Tp, _Up>&& __p) noexcept
	{ return std::move(__p.first); }

	template <typename _Tp, typename _Up>
	constexpr _Tp&
	get(pair<_Up, _Tp>& __p) noexcept
	{ return __p.second; }

	template <typename _Tp, typename _Up>
	constexpr const _Tp&
	get(const pair<_Up, _Tp>& __p) noexcept
	{ return __p.second; }

	template <typename _Tp, typename _Up>
	constexpr _Tp&&
	get(pair<_Up, _Tp>&& __p) noexcept
	{ return std::move(__p.second); }


	/// Assign @p __new_val to @p __obj and return its previous value.
//  template <typename _Tp, typename _Up = _Tp>
//    inline _Tp
//   exchange(_Tp& __obj, _Up&& __new_val)
//    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
//#endif

	// Stores a tuple of indices.  Used by tuple and pair, and by bind() to
	// extract the elements in a tuple.
	template<size_t... _Indexes>
	struct _Index_tuple
	{
		typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
	};

	// Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.
	template<size_t _Num>
	struct _Build_index_tuple
	{
		typedef typename _Build_index_tuple < _Num - 1 >::__type::__next __type;
	};

	template<>
	struct _Build_index_tuple<0>
	{
		typedef _Index_tuple<> __type;
	};

	/// Class template integer_sequence
	template<typename _Tp, _Tp... _Idx>
	struct integer_sequence
	{
		typedef _Tp value_type;
		static constexpr size_t size() { return sizeof...(_Idx); }
	};

	template<typename _Tp, _Tp _Num,
	         typename _ISeq = typename _Build_index_tuple<_Num>::__type>
	struct _Make_integer_sequence;

	template<typename _Tp, _Tp _Num,  size_t... _Idx>
	struct _Make_integer_sequence<_Tp, _Num, _Index_tuple<_Idx...>>
	{
		static_assert( _Num >= 0,
		               "Cannot make integer sequence of negative length" );

		typedef integer_sequence<_Tp, static_cast<_Tp>(_Idx)...> __type;
	};

	/// Alias template make_integer_sequence
	template<typename _Tp, _Tp _Num>
	using make_integer_sequence
	    = typename _Make_integer_sequence<_Tp, _Num>::__type;

	/// Alias template index_sequence
	template<size_t... _Idx>
	using index_sequence = integer_sequence<size_t, _Idx...>;

	/// Alias template make_index_sequence
	template<size_t _Num>
	using make_index_sequence = make_integer_sequence<size_t, _Num>;

	/// Alias template index_sequence_for
	template<typename... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;

	/*template<class T>
	typename std::add_rvalue_reference<T>::type declval() noexcept;*/
}

#endif
