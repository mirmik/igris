#ifndef IGRIS_STD_CHRONO_H
#define IGRIS_STD_CHRONO_H

#include <igris/util/bug.h>
#include <ratio>
#include <type_traits>

namespace std
{
    namespace chrono
    {
        template <class Rep, class Period = std::ratio<1>> class duration
        {
            Rep ticks;

        public:
            using rep = Rep;
            using period = Period;

            duration() = default;
            constexpr duration(const Rep &t) : ticks(t) {}
            constexpr duration(const duration &) = default;
            constexpr duration(duration &&) = default;
            duration &operator=(const duration &) = default;
            duration &operator=(duration &&) = default;

            constexpr Rep count() const
            {
                return ticks;
            }

            template <class Rep2, class Period2>
            operator duration<Rep2, Period2>() const;
        };

        // duration_cast
        template <class ToDuration, class Rep, class Period>
        constexpr ToDuration duration_cast(const duration<Rep, Period> &d)
        {
            using ToRep = typename ToDuration::rep;
            using ToPeriod = typename ToDuration::period;
            using FromPeriod = typename duration<Rep, Period>::period;
            using ratio =
                typename std::ratio_divide<FromPeriod, ToPeriod>::type;
            return ToDuration(
                static_cast<ToRep>(d.count() * ratio::num / ratio::den));
        }

        template <class Rep, class Period>
        template <class Rep2, class Period2>
        duration<Rep, Period>::operator duration<Rep2, Period2>() const
        {
            return duration_cast<duration<Rep2, Period2>>(*this);
        }

        // duration operators
        template <class Rep1, class Period1, class Rep2, class Period2>
        constexpr bool operator==(const duration<Rep1, Period1> &lhs,
                                  const duration<Rep2, Period2> &rhs)
        {
            using ratio = typename std::ratio_divide<Period1, Period2>::type;
            return lhs.count() * ratio::num == rhs.count() * ratio::den;
        }

        template <class Rep1, class Period1, class Rep2, class Period2>
        constexpr bool operator!=(const duration<Rep1, Period1> &lhs,
                                  const duration<Rep2, Period2> &rhs)
        {
            return !(lhs == rhs);
        }

        // operator +
        template <class Rep1, class Period1, class Rep2, class Period2>
        constexpr auto operator+(const duration<Rep1, Period1> &lhs,
                                 const duration<Rep2, Period2> &rhs)
        {
            using ratio = typename std::ratio_divide<Period1, Period2>::type;
            return duration<Rep1, Period1>(
                lhs.count() + rhs.count() * ratio::num / ratio::den);
        }

        // time_point
        template <class Clock, class Duration = typename Clock::duration>
        class time_point
        {
            Duration dur;

        public:
            time_point() = default;
            constexpr time_point(const Duration &dur) : dur(dur) {}
            constexpr time_point(const time_point &) = default;
            constexpr time_point(time_point &&) = default;
            time_point &operator=(const time_point &) = default;
            time_point &operator=(time_point &&) = default;

            constexpr Duration time_since_epoch() const
            {
                return dur;
            }
        };

        // time_point + duration operator
        template <class Clock, class Duration1, class Duration2>
        constexpr auto operator+(const time_point<Clock, Duration1> &lhs,
                                 const Duration2 &rhs)
        {
            return time_point<Clock, Duration1>(lhs.time_since_epoch() + rhs);
        }

        // operator: time_point - time_point
        template <class Clock, class Duration1, class Duration2>
        constexpr auto operator-(const time_point<Clock, Duration1> &lhs,
                                 const time_point<Clock, Duration2> &rhs)
        {
            using ratio =
                typename std::ratio_divide<typename Duration1::period,
                                           typename Duration2::period>::type;
            return duration<typename Duration1::rep,
                            typename Duration1::period>(
                lhs.time_since_epoch().count() -
                rhs.time_since_epoch().count() * ratio::num / ratio::den);
        }

        using nanoseconds = duration<long long, std::nano>;
        using microseconds = duration<long long, std::micro>;
        using milliseconds = duration<long long, std::milli>;
        using seconds = duration<long long>;
        using minutes = duration<long long, std::ratio<60>>;
        using hours = duration<long long, std::ratio<3600>>;
        using days = duration<long long, std::ratio<86400>>;
        using weeks = duration<long long, std::ratio<604800>>;

        class system_clock
        {
        public:
            using duration = std::chrono::milliseconds;
            using rep = duration::rep;
            using period = duration::period;
            using time_point = std::chrono::time_point<system_clock>;

            static constexpr bool is_steady = false;

            static time_point now() noexcept
            {
                BUG();
            }
        };

        namespace literals
        {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
            constexpr nanoseconds operator"" ns(unsigned long long ns)
            {
                return nanoseconds(ns);
            }

            constexpr microseconds operator"" us(unsigned long long us)
            {
                return microseconds(us);
            }

            constexpr milliseconds operator"" ms(unsigned long long ms)
            {
                return milliseconds(ms);
            }

            constexpr seconds operator"" s(unsigned long long s)
            {
                return seconds(s);
            }

            constexpr minutes operator"" min(unsigned long long min)
            {
                return minutes(min);
            }

            constexpr hours operator"" h(unsigned long long h)
            {
                return hours(h);
            }

            constexpr days operator"" d(unsigned long long d)
            {
                return days(d);
            }

            constexpr weeks operator"" w(unsigned long long w)
            {
                return weeks(w);
            }
#pragma GCC diagnostic pop
        }
    }

    namespace chrono_literals = std::chrono::literals;
}

#endif