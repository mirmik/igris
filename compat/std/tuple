#ifndef IGRIS_TUPLE_H
#define IGRIS_TUPLE_H

#include <type_traits>
#include <utility>

namespace std
{
    template <class... Args> struct tuple;

    template <> struct tuple<>
    {
    };

    template <class T0> struct tuple<T0>
    {
        T0 a0;

    public:
        template <class U0> explicit tuple(U0 &&u0) : a0(u0) {}
    };

    template <class T0, class T1> struct tuple<T0, T1>
    {
        T0 a0;
        T1 a1;

    public:
        template <class U0, class U1>
        tuple(U0 &&u0, U1 &&u1)
            : a0(std::forward<U0>(u0)), a1(std::forward<U1>(u1))
        {
        }
    };

    template <class T0, class T1, class T2> struct tuple<T0, T1, T2>
    {
        T0 a0;
        T1 a1;
        T2 a2;

    public:
        template <class U0, class U1, class U2>
        tuple(U0 &&u0, U1 &&u1, U2 &&u2)
            : a0(std::forward<U0>(u0)), a1(std::forward<U1>(u1)),
              a2(std::forward<U2>(u2))
        {
        }
    };

    template <class T0, class T1, class T2, class T3>
    struct tuple<T0, T1, T2, T3>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
    };

    template <class T0, class T1, class T2, class T3, class T4>
    struct tuple<T0, T1, T2, T3, T4>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
        T4 a4;
    };

    template <class T0, class T1, class T2, class T3, class T4, class T5>
    struct tuple<T0, T1, T2, T3, T4, T5>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
        T4 a4;
        T5 a5;
    };

    template <class T0,
              class T1,
              class T2,
              class T3,
              class T4,
              class T5,
              class T6>
    struct tuple<T0, T1, T2, T3, T4, T5, T6>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
        T4 a4;
        T5 a5;
        T6 a6;
    };

    template <class T0,
              class T1,
              class T2,
              class T3,
              class T4,
              class T5,
              class T6,
              class T7>
    struct tuple<T0, T1, T2, T3, T4, T5, T6, T7>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
        T4 a4;
        T5 a5;
        T6 a6;
        T7 a7;
    };

    template <class T0,
              class T1,
              class T2,
              class T3,
              class T4,
              class T5,
              class T6,
              class T7,
              class T8>
    struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
        T4 a4;
        T5 a5;
        T6 a6;
        T7 a7;
        T8 a8;
    };

    template <class T0,
              class T1,
              class T2,
              class T3,
              class T4,
              class T5,
              class T6,
              class T7,
              class T8,
              class T9>
    struct tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        T0 a0;
        T1 a1;
        T2 a2;
        T3 a3;
        T4 a4;
        T5 a5;
        T6 a6;
        T7 a7;
        T8 a8;
        T9 a9;
    };

    template <int N> struct get_impl;

    template <> struct get_impl<0>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a0;
        }
    };
    template <> struct get_impl<1>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a1;
        }
    };
    template <> struct get_impl<2>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a2;
        }
    };
    template <> struct get_impl<3>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a3;
        }
    };
    template <> struct get_impl<4>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a4;
        }
    };
    template <> struct get_impl<5>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a5;
        }
    };
    template <> struct get_impl<6>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a6;
        }
    };
    template <> struct get_impl<7>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a7;
        }
    };
    template <> struct get_impl<8>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a8;
        }
    };
    template <> struct get_impl<9>
    {
        template <class Tpl> static inline auto get(Tpl &tpl)
        {
            return tpl.a9;
        }
    };

    template <int N, class Tpl> auto get(Tpl &tpl)
    {
        return get_impl<N>::get(tpl);
    }

    template <class... Args> struct tuple_size
    {
        constexpr static size_t value = sizeof...(Args);
    };

    template <class... Args> size_t tuple_size_v(const std::tuple<Args...> &)
    {
        return tuple_size<Args...>::value;
    }

    namespace detail
    {
        template <class F, class Tuple, std::size_t... I>
        constexpr decltype(auto)
        apply_impl(F &&f, Tuple &&t, std::index_sequence<I...>)
        {
            return std::invoke(std::forward<F>(f),
                               std::get<I>(std::forward<Tuple>(t))...);
        }
    } // namespace detail

    template <class F, class Tuple>
    constexpr decltype(auto) apply(F &&f, Tuple &&t)
    {
        return detail::apply_impl(
            std::forward<F>(f),
            std::forward<Tuple>(t),
            std::make_index_sequence<
                std::tuple_size<std::remove_reference_t<Tuple>>::value>{});
    }

    template <std::size_t _Int, class _Tp> class tuple_element;

    // Various functions which give std::pair a tuple-like interface.

    template <class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
        : public integral_constant<std::size_t, 2>
    {
    };

    /// Partial specialization for std::pair
    template <class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    {
        typedef _Tp1 type;
    };

    /// Partial specialization for std::pair
    template <class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    {
        typedef _Tp2 type;
    };

    template <std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type &
    get(std::pair<_Tp1, _Tp2> &__in) noexcept
    {
        return __pair_get<_Int>::__get(__in);
    }

    template <std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type &&
    get(std::pair<_Tp1, _Tp2> &&__in) noexcept
    {
        return __pair_get<_Int>::__move_get(std::move(__in));
    }

    template <std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type &
    get(const std::pair<_Tp1, _Tp2> &__in) noexcept
    {
        return __pair_get<_Int>::__const_get(__in);
    }
}

#endif
