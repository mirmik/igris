#ifndef IGRIS_STD_IOS_H
#define IGRIS_STD_IOS_H

#include <string>

namespace std
{
    class ios_base
    {
    public:
        enum openmode
        {
            in = 1,
            out = 2,
            ate = 4,
            app = 8,
            trunc = 16,
            binary = 32
        };

        enum seekdir
        {
            beg = 0,
            cur = 1,
            end = 2
        };

        enum iostate
        {
            goodbit = 0,
            badbit = 1,
            failbit = 2,
            eofbit = 4
        };

        enum fmtflags
        {
            boolalpha = 1,
            dec = 2,
            fixed = 4,
            hex = 8,
            internal = 16,
            left = 32,
            oct = 64,
            right = 128,
            scientific = 256,
            showbase = 512,
            showpoint = 1024,
            showpos = 2048,
            skipws = 4096,
            unitbuf = 8192,
            uppercase = 16384,
            adjustfield = 48,
            basefield = 72,
            floatfield = 384
        };

        enum event
        {
            erase_event,
            imbue_event,
            copyfmt_event
        };

        typedef void (*event_callback)(event, ios_base &, int);

        class Init
        {
        public:
            Init();
            ~Init();
        };

        static Init init;

        ios_base() {}
        virtual ~ios_base() {}

        fmtflags flags() const
        {
            return _flags;
        }

        fmtflags flags(fmtflags fmtfl)
        {
            fmtflags oldflags = _flags;
            _flags = fmtfl;
            return oldflags;
        }

    private:
        fmtflags _flags = {};
    };

    template <class CharT, class Traits = std::char_traits<CharT>>
    class basic_ios : public std::ios_base
    {
    };

    class boolalpha_cls
    {
    public:
        boolalpha_cls() {}
    };

    class noboolalpha_cls
    {
    public:
        noboolalpha_cls() {}
    };

    class uppercase_cls
    {
    public:
        uppercase_cls() {}
    };

    class nouppercase_cls
    {
    public:
        nouppercase_cls() {}
    };

    const boolalpha_cls boolalpha;
    const noboolalpha_cls noboolalpha;
    const uppercase_cls uppercase;
    const nouppercase_cls nouppercase;

    using ios = basic_ios<char, char_traits<char>>;

}

#endif