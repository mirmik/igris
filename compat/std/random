#ifndef IGRIS_STD_RANDOM_H
#define IGRIS_STD_RANDOM_H

namespace std
{
    template <class T> class uniform_int_distribution
    {
        T a;
        T b;

    public:
        uniform_int_distribution(T a, T b) : a(a), b(b) {}
        T operator()()
        {
            return a + rand() % (b - a);
        }
    };

    template <class T> class uniform_real_distribution
    {
        T a;
        T b;

    public:
        uniform_real_distribution(T a, T b) : a(a), b(b) {}
        T operator()()
        {
            return a + (b - a) * (rand() / (T)RAND_MAX);
        }
    };

    template <class T> class normal_distribution
    {
        T a;
        T b;

    public:
        normal_distribution(T a, T b) : a(a), b(b) {}
        T operator()()
        {
            return a + (b - a) * (rand() / (T)RAND_MAX);
        }
    };

    template <class UIntType, UIntType a, UIntType c, UIntType m>
    class linear_congruential_engine
    {
        UIntType state;

    public:
        linear_congruential_engine(UIntType state) : state(state) {}
        UIntType operator()()
        {
            if constexpr (m == 0)
                state = a * state + c;
            else
                state = (a * state + c) % m;
            return state;
        }
    };
}

#endif