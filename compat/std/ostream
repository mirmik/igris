#ifndef IGRIS_STD_OSTREAM_H
#define IGRIS_STD_OSTREAM_H

#include <iomanip>
#include <ios>
#include <streambuf>

namespace std
{
    class endl_class
    {
    };
    extern endl_class endl;

    template <class CharT, class Traits = std::char_traits<CharT>>
    class basic_ostream : virtual public std::basic_ios<CharT, Traits>
    {
        basic_streambuf<CharT, Traits> *streambuf = nullptr;

    public:
        using char_type = CharT;
        using traits_type = Traits;

        basic_ostream()
        {
            // this->init(new basic_streambuf<CharT, Traits>());
        }
        basic_ostream(basic_ostream &&other)
        {
            this->init(other.streambuf);
            other.streambuf = nullptr;
        }

        basic_ostream(const basic_ostream &) = delete;

        basic_ostream &operator=(const basic_ostream &other) = delete;

        basic_ostream &operator=(basic_ostream &&other)
        {
            this->init(other.streambuf);
            other.streambuf = nullptr;
            return *this;
        }

        ~basic_ostream()
        {
            delete streambuf;
        }

        explicit basic_ostream(std::basic_streambuf<CharT, Traits> *sb)
        {
            init(sb);
        }

        void init(std::basic_streambuf<CharT, Traits> *sb)
        {
            streambuf = sb;
        }

        basic_ostream &operator<<(const CharT *str)
        {
            streambuf->sputn(str, strlen(str));
            return *this;
        }

        // write
        ssize_t write(const CharT *str, size_t sz)
        {
            return streambuf->sputn(str, sz);
        }
    };

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             char data)
    {
        os.write(&data, 1);
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             endl_class)
    {
        os.write("\n", 1);
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             const std::string &data)
    {
        os.write(data.c_str(), data.size());
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             const char *data)
    {
        os.write(data, strlen(data));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             int data)
    {
        char buf[32];
        itoa(data, buf, 10);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             unsigned int data)
    {
        char buf[32];
        itoa(data, buf, 10);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             long data)
    {
        char buf[32];
        itoa(data, buf, 10);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             unsigned long data)
    {
        char buf[32];
        itoa(data, buf, 10);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             long long data)
    {
        char buf[32];
        itoa(data, buf, 10);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             unsigned long long data)
    {
        char buf[32];
        itoa(data, buf, 10);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             double data)
    {
        char buf[32];
        sprintf(buf, "%f", data);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             long double data)
    {
        char buf[32];
        sprintf(buf, "%Lf", data);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             float data)
    {
        char buf[32];
        sprintf(buf, "%f", data);
        os.write(buf, strlen(buf));
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             setprecision data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             setbase data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             setfill data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             setw data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             setiosflags data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             resetiosflags data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             bool data)
    {
        if (data)
            os.write("true", 4);
        else
            os.write("false", 5);
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             fixed_cls data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             hex_cls data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             boolalpha_cls data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             noboolalpha_cls data)
    {
        return os;
    }

    class manipulator
    {
        using stream_type = ios_base;
        using manipulator_func = stream_type &(*)(stream_type &);

    public:
        manipulator(manipulator_func f) : _f(f) {}

        stream_type &operator()(stream_type &os) const
        {
            return _f(os);
        }

    private:
        manipulator_func _f;
    };

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             manipulator &&foo)
    {
        foo(os);
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             uppercase_cls data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             nouppercase_cls data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             dec_cls data)
    {
        return os;
    }

    template <class CharT, class Traits>
    basic_ostream<CharT, Traits> &operator<<(basic_ostream<CharT, Traits> &os,
                                             oct_cls data)
    {
        return os;
    }

    using ostream = basic_ostream<char, std::char_traits<char>>;
}

#endif