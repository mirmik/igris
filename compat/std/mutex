#ifndef IGRIS_STD_MUTEX_H
#define IGRIS_STD_MUTEX_H

namespace std
{
    class mutex
    {
        int _dummy;

    public:
        mutex() {}
        void lock() {}
        void unlock() {}
    };

    class recursive_mutex
    {
        int _dummy;

    public:
        recursive_mutex() {}
        void lock() {}
        void unlock() {}
    };

    template <typename T> class unique_lock
    {
        T &mtx;

    public:
        unique_lock(T &mtx) : mtx(mtx)
        {
            mtx.lock();
        }
        ~unique_lock()
        {
            mtx.unlock();
        }

        void lock()
        {
            mtx.lock();
        }

        void unlock()
        {
            mtx.unlock();
        }
    };

    template <typename T> class lock_guard
    {
        T &lock;

    public:
        lock_guard(T &lock) : lock(lock)
        {
            lock.lock();
        }
        ~lock_guard()
        {
            lock.unlock();
        }
    };

}

#endif