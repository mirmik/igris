#ifndef IGRIS_STD_NUMERIC_H
#define IGRIS_STD_NUMERIC_H

#include <igris/util/types_extension.h>
#include <stdint.h>
#include <limits.h>
#include <float.h>

#include <igris/limits.h>

namespace std
{
	template <class T> struct numeric_limits;

	template<> struct numeric_limits<bool>;
	template<> struct numeric_limits<char>;
	template<> struct numeric_limits<signed char>;
	template<> struct numeric_limits<unsigned char>;
	template<> struct numeric_limits<wchar_t>;
	template<> struct numeric_limits<short>;
	template<> struct numeric_limits<unsigned short>;
	template<> struct numeric_limits<unsigned int>;
	template<> struct numeric_limits<unsigned long>;
	template<> struct numeric_limits<unsigned long long>;
	
	template<> struct numeric_limits<int> 
	{
		constexpr static int max() { return INT_MAX; } 
		constexpr static int min() { return INT_MIN; } 
		//constexpr static int digits = INT_DIG;
		//constexpr static int digits10 = INT_DIG;
		//constexpr static int max_digits10 = INT_DIG;
		//constexpr static int radix = INT_RADIX;
		constexpr static int epsilon() { return 0; }
		constexpr static int round_error() { return 0; }
		constexpr static bool has_infinity = false;
		constexpr static bool has_quiet_NaN = false;
		constexpr static bool has_signaling_NaN = false;
	};

	template<> struct numeric_limits<long> 
	{
		constexpr static long max() { return LONG_MAX; } 
		constexpr static long min() { return LONG_MIN; }
		//constexpr static int digits = LONG_DIG;
		//constexpr static int digits10 = LONG_DIG;
		//constexpr static int max_digits10 = LONG_DIG;
		//constexpr static int radix = LONG_RADIX;
		constexpr static int epsilon() { return 0; }
		constexpr static int round_error() { return 0; }
		constexpr static bool has_infinity = false;
		constexpr static bool has_quiet_NaN = false;
		constexpr static bool has_signaling_NaN = false;
	};

	template<> struct numeric_limits<long long> 
	{
		constexpr static long long max() { return LLONG_MAX; } 
		constexpr static long long min() { return LLONG_MIN; } 
		//constexpr static int digits = LLONG_DIG;
		//constexpr static int digits10 = LLONG_DIG;
		//constexpr static int max_digits10 = LLONG_DIG;
		//constexpr static int radix = LLONG_RADIX;
		constexpr static int epsilon() { return 0; }
		constexpr static int round_error() { return 0; }
		constexpr static bool has_infinity = false;
		constexpr static bool has_quiet_NaN = false;
		constexpr static bool has_signaling_NaN = false;
	};

	template<> struct numeric_limits<float> 
	{
		constexpr static float max() { return FLT_MAX; } 
		constexpr static float min() { return FLT_MIN; } 
		constexpr static float lowest() { return -FLT_MAX; } 
		constexpr static float epsilon() { return FLT_EPSILON; }  
		constexpr static float infinity() { return 1.0/0.0; } 
		constexpr static float quiet_NaN() { return 0.0/0.0; }
		constexpr static float signaling_NaN() { return 0.0/0.0; }
		constexpr static float denorm_min() { return FLT_MIN; }
		constexpr static int digits = FLT_DIG;
		constexpr static int digits10 = FLT_DIG;
		constexpr static int max_digits10 = FLT_DIG;
		constexpr static int radix = FLT_RADIX;
		constexpr static int min_exponent = FLT_MIN_EXP;
		constexpr static int min_exponent10 = FLT_MIN_EXP;
		constexpr static int max_exponent = FLT_MAX_EXP;
		constexpr static int max_exponent10 = FLT_MAX_EXP;
		constexpr static bool has_infinity = true;
		constexpr static bool has_quiet_NaN = true;
		constexpr static bool has_signaling_NaN = true;
	};

	template<> struct numeric_limits<double> 
	{
		constexpr static double max() { return DBL_MAX; } 
		constexpr static double min() { return DBL_MIN; } 
		constexpr static double lowest() { return -DBL_MAX; } 
		constexpr static double epsilon() { return DBL_EPSILON; } 
		constexpr static double infinity() { return 1.0/0.0; }
		constexpr static double quiet_NaN() { return 0.0/0.0; }
		constexpr static double signaling_NaN() { return 0.0/0.0; }
		constexpr static double denorm_min() { return DBL_MIN; }
		//constexpr static int digits = DBL_DIG;
		//constexpr static int digits10 = DBL_DIG;
		//constexpr static int max_digits10 = DBL_DIG;
		//constexpr static int radix = DBL_RADIX;
		constexpr static int min_exponent = DBL_MIN_EXP;
		constexpr static int min_exponent10 = DBL_MIN_EXP;
		constexpr static int max_exponent = DBL_MAX_EXP;
		constexpr static int max_exponent10 = DBL_MAX_EXP;
		constexpr static bool has_infinity = true;
		constexpr static bool has_quiet_NaN = true;
		constexpr static bool has_signaling_NaN = true; 
	};
	
	template<> struct numeric_limits<long double> 
	{
		constexpr static long double max() { return LDBL_MAX; }
		constexpr static long double min() { return LDBL_MIN; }
		constexpr static long double lowest() { return -LDBL_MAX; }
		constexpr static long double epsilon() { return LDBL_EPSILON; }
		constexpr static long double infinity() { return 1.0/0.0; }
		constexpr static long double quiet_NaN() { return 0.0/0.0; }
		constexpr static long double signaling_NaN() { return 0.0/0.0; }
		constexpr static long double denorm_min() { return LDBL_MIN; }
		//constexpr static int digits = LDBL_DIG;
		///constexpr static int digits10 = LDBL_DIG;
		//constexpr static int max_digits10 = LDBL_DIG;
	//	constexpr static int radix = LDBL_RADIX;
		constexpr static int min_exponent = LDBL_MIN_EXP;
		constexpr static int min_exponent10 = LDBL_MIN_EXP;
		constexpr static int max_exponent = LDBL_MAX_EXP;
		constexpr static int max_exponent10 = LDBL_MAX_EXP;
		constexpr static bool has_infinity = true;
		constexpr static bool has_quiet_NaN = true;
		constexpr static bool has_signaling_NaN = true;
	};
}

#endif
