#ifndef IGRIS_STD_NUMERIC_H
#define IGRIS_STD_NUMERIC_H

#include <igris/util/types_extension.h>
#include <stdint.h>
#include <limits.h>
#include <cfloat>

namespace std
{
	template <class T> struct numeric_limits;

	template<> struct numeric_limits<bool>;
	template<> struct numeric_limits<char>;
	template<> struct numeric_limits<signed char>;
	template<> struct numeric_limits<unsigned char>;
	template<> struct numeric_limits<wchar_t>;
	template<> struct numeric_limits<short>;
	template<> struct numeric_limits<unsigned short>;
	template<> struct numeric_limits<unsigned int>;
	template<> struct numeric_limits<long>;
	template<> struct numeric_limits<unsigned long>;
	template<> struct numeric_limits<long long>;
	template<> struct numeric_limits<unsigned long long>;
	template<> struct numeric_limits<float>;
	
	template<> struct numeric_limits<int> 
	{
		constexpr static int max() { return INT_MAX; } 
		constexpr static int min() { return INT_MIN; } 
	};

	template<> struct numeric_limits<long> 
	{
		constexpr static long max() { return LONG_MAX; } 
		constexpr static long min() { return LONG_MIN; }
	};

	template<> struct numeric_limits<long long> 
	{
		constexpr static long long max() { return LLONG_MAX; } 
		constexpr static long long min() { return LLONG_MIN; } 
	};

	template<> struct numeric_limits<float> 
	{
		constexpr static float max() { return FLT_MAX; } 
		constexpr static float min() { return FLT_MIN; } 
		constexpr static float lowest() { return -FLT_MAX; } 
		constexpr static float epsilon() { return FLT_EPSILON; }  
		constexpr static float infinity() { return 1.0/0.0; } 
	};

	template<> struct numeric_limits<double> 
	{
		constexpr static double max() { return DBL_MAX; } 
		constexpr static double min() { return DBL_MIN; } 
		constexpr static double lowest() { return -DBL_MAX; } 
		constexpr static double epsilon() { return DBL_EPSILON; } 
		constexpr static double infinity() { return 1.0/0.0; } 
	};
	
	template<> struct numeric_limits<long double>;
}

#endif
