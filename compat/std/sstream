#ifndef IGRIS_STD_SSTREAM_H
#define IGRIS_STD_SSTREAM_H

#include <iostream>
#include <string>

namespace std
{
    template <class CharT,
              class Traits = std::char_traits<CharT>,
              class Allocator = std::allocator<CharT>>
    class basic_stringstream : virtual public std::basic_ostream<CharT, Traits>,
                               virtual public std::basic_istream<CharT, Traits>
    {
        std::basic_string<CharT, Traits, Allocator> _str;

    public:
        using char_type = CharT;
        using traits_type = Traits;
        using allocator_type = Allocator;
        using string_type = std::basic_string<CharT, Traits, Allocator>;

        basic_stringstream() : std::basic_ostream<CharT, Traits>() {}
        basic_stringstream(const string_type &str)
            : std::basic_ostream<CharT, Traits>(), _str(str)
        {
        }

        void clear()
        {
            _str.clear();
        }

        string_type str() const
        {
            return _str;
        }

        void str(const string_type &str)
        {
            _str = str;
        }

        bool eof() const
        {
            return false;
        }

        bool fail() const
        {
            return false;
        }

        bool bad() const
        {
            return false;
        }

        bool good() const
        {
            return true;
        }
    };

    using ostringstream = basic_stringstream<char>;
    using stringstream = basic_stringstream<char>;
    using istringstream = basic_stringstream<char>;
}

#endif